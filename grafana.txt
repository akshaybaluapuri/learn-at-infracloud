
# deployment:
```
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    component: core
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: grafana
        component: core
    spec:
      containers:
        - image: grafana/grafana:3.1.1
          name: grafana
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: password
          ports:
            - containerPort: 3000
          volumeMounts:
          - name: grafana-persistent-storage
            mountPath: /var
      volumes:
      - name: grafana-persistent-storage
        emptyDir: {}
        
```        
 
# service

```
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: monitoring

spec:
  selector:
    app: grafana
  type: NodePort
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 8000
```

# Add prometheus
> Add data source as prometheus by copying prometheus URL under data source type prometheus


--------------------------------------
### Example dashboard: https://github.com/linuxacademy/content-kubernetes-prometheus-env/blob/master/grafana/dashboard/Kubernetes%20All%20Nodes.json
dashboard json elements documentation: https://grafana.com/docs/grafana/latest/reference/dashboard/

# find configuration file
based on installation type find configuration file path from https://grafana.com/docs/grafana/latest/installation/configuration/
eg /etc/grafana/grafana.ini
from this file get provisioning path: 
```
[paths]
provisioning = <path to config files>
```
where provisioning path filestructute will be like: https://grafana.com/tutorials/provision-dashboards-and-data-sources/#3
eg path(maybe relative): /usr/share/grafana/conf/provisioning(/dashboards/sample.yaml)
now this directory will be used for configuration as code to provision new datasource, dashboard or notifiers


```
If you donâ€™t specify an id in the dashboard definition, then Grafana assigns one during provisioning. You can set the id yourself if you want to reference the dashboard from other dashboards. Be careful to not use the same id for multiple dashboards, as this will cause a conflict.
```

